#
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
# with the License. A copy of the License is located at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
# and limitations under the License.
#
import base64
import json
import os
import boto3
from typing import Dict
from image_generator import image_generator
from aws_lambda_powertools import Logger, Tracer, Metrics
from aws_lambda_powertools.utilities.typing import LambdaContext
from aws_lambda_powertools.metrics import MetricUnit
from aws_lambda_powertools.utilities.validation import validate, SchemaValidationError
from datetime import datetime


logger = Logger(service="IMAGE_GENERATION")
tracer = Tracer(service="IMAGE_GENERATION")
metrics = Metrics(namespace="image_generation", service="IMAGE_GENERATION")

aws_region = boto3.Session().region_name
bucket = os.environ['OUTPUT_BUCKET']


bedrock_client = boto3.client('bedrock-runtime')
rekognition_client=boto3.client('rekognition')
comprehend_client=boto3.client('comprehend', region_name=aws_region)


@logger.inject_lambda_context(log_event=True)
@tracer.capture_lambda_handler
@metrics.log_metrics(capture_cold_start_metric=True)
def handler(event,  context: LambdaContext) -> dict:

    """
        Invokes the Stability.ai Stable Diffusion XL model 
        to create an image using the input provided in the request body.

    """

    logger.info(f"event is {event}")
    
    input_params=event['detail']['imageInput']
    #image_name="public/"+input_params['filename']
    input_text=input_params['input_text']
    
    current_datetime = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    file_name="generatedimage_"+current_datetime

    response={
        "filename":file_name,
        "generatedImagePath":"",
        "input_text":input_params['input_text'],
        "generateImageJobStatus":"Failed",
        "jobid":input_params["jobid"],
        "message":''
    }
    sample_string_bytes = base64.b64decode(input_text)
    decoded_input_text = sample_string_bytes.decode("utf-8")
    logger.info(f" entered text is :: {decoded_input_text}")
    
    if(len(decoded_input_text)==0):
        response["message"]="Input text is empty."
        return response
       
    img = image_generator(decoded_input_text,file_name, rekognition_client,comprehend_client,bedrock_client,bucket)
       
    text_moderation_response=img.text_moderation()
    if(text_moderation_response['isToxic']==True):
        response["message"]="In appropriate input prompt. Please change the prompt."
    else:
        bedrock_response = img.generate_image(input_params)
        parsed_reponse = parse_response(bedrock_response)
        if(parsed_reponse['image_generated_status']=='Failed'):
            response["message"]="No image generated by bedrock API, Please check the prompt"
        else:
            imgbase64encoded= parsed_reponse['image_generated']
            imageGenerated=img.upload_file_to_s3(imgbase64encoded)

            image_moderation_response=img.image_moderation()
            if(image_moderation_response['isToxic']==True):
                response["message"]="In-appropriate image generated."
            else:
                response={
                        "filename":file_name,
                        "image_path":bucket,
                        "input_text":decoded_input_text,
                        "status":"Completed",
                        "jobid":input_params["jobid"],
                        "message":"Image generated successfully"
                    }

    print (f"response :: {response}")
    img.send_job_status(response)

    return response


def parse_response(query_response):
    """Parse response and return generated image and the prompt"""
    print(f'query_response:: {query_response}')
    if(not query_response):
         parsed_reponse['image_generated_status']='Failed'
    response_dict = json.loads(query_response["body"].read())
    parsed_reponse={
        "image_generated":'',
        "image_generated_status":'Success'
    }
    if(response_dict['artifacts'] is None):
         parsed_reponse['image_generated_status']='Failed'
    else:
        parsed_reponse['image_generated']=response_dict['artifacts'][0]["base64"]
    return parsed_reponse



